name: BuildDeployWEBProd

on:
  push:
    branches:
      - main

env:
  APP_NAME: sensorweb

jobs:
  build:
    name: Build docker image
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d%H%M)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        env:
          IMAGE_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}
        with:
          push: true
          context: .
          file: Dockerfile.sensorweb
          tags: |
            ${{env.IMAGE_REPOSITORY}}:${{ steps.date.outputs.date }}
            ${{env.IMAGE_REPOSITORY}}:${{ github.ref_name }}
            ${{env.IMAGE_REPOSITORY}}:${{ github.ref_name }}-${{ github.run_number }}
          build-args: ENV_KEY=prod

      - name: Logout from Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Dump context
        if: always()
        uses: crazy-max/ghaction-dump-context@v1

  deploy:
    needs: build
    name: Deploy to EKS
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d%H%M)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Deploy to EKS
        uses: bitovi/github-actions-deploy-eks-helm@v1.0.3
        env:
          REPOSITORY_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}
          IMAGE_TAG: ${{ github.ref_name }}-${{ github.run_number }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS__KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          name: ${{ env.APP_NAME }}-prod
          cluster-name: iotnest
          config-files: chart_web/values-prod.yaml
          namespace: prod
          chart-path: chart_web/
          values: image.repository=${{ env.REPOSITORY_URL }},image.tag=${{ env.IMAGE_TAG }}

      - name: Logout from Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Dump context
        if: always()
        uses: crazy-max/ghaction-dump-context@v1

